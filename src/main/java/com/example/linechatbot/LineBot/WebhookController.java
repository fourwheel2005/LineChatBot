package com.example.linechatbot.LineBot;

import com.example.linechatbot.User.model.User;
import com.example.linechatbot.User.model.UserRepository;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.linecorp.bot.client.LineMessagingClient;
import com.linecorp.bot.model.ReplyMessage;
import com.linecorp.bot.model.event.CallbackRequest;
import com.linecorp.bot.model.event.Event;
import com.linecorp.bot.model.event.FollowEvent;
import com.linecorp.bot.model.event.MessageEvent;
import com.linecorp.bot.model.event.message.TextMessageContent;
import com.linecorp.bot.model.message.TextMessage;
import com.linecorp.bot.model.objectmapper.ModelObjectMapper;
import com.linecorp.bot.model.profile.UserProfileResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;


import java.io.*;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.time.Instant;
import java.time.LocalDateTime;
import java.util.List;
import java.util.concurrent.CompletableFuture;

@RestController
public class WebhookController {

    @Autowired
    private LineMessagingClient lineMessagingClient;
    @Autowired
    private UserRepository userRepository;

    private final ObjectMapper objectMapper = ModelObjectMapper.createNewObjectMapper();



    @PostMapping("/callback")
    public String callback(@RequestBody String payload) throws Exception {
        CallbackRequest callbackRequest = objectMapper.readValue(payload, CallbackRequest.class);
        List<Event> events = callbackRequest.getEvents();

        for (Event event : events) {
            if (event instanceof MessageEvent) {
                CompletableFuture.runAsync(() -> handleMessageEvent((MessageEvent<?>) event));
            } else if (event instanceof FollowEvent) {
                CompletableFuture.runAsync(() -> handleFollowEvent((FollowEvent) event));
            }
        }


        return "OK";
    }

    private void handleFollowEvent(FollowEvent event) {
        String replyToken = event.getReplyToken();
        String userId = event.getSource().getUserId();

        try {
            UserProfileResponse profile = lineMessagingClient.getProfile(userId).get();

            if (!userRepository.existsById(userId)) {
                User newUser = new User();
                newUser.setUserId(userId);
                newUser.setName(profile.getDisplayName());
                newUser.setDisplayName(profile.getDisplayName());
                newUser.setCreatedAt(LocalDateTime.now());
                userRepository.save(newUser);
            }

            String welcomeMessage = """
    ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì %s üôèüèª
    ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏™‡∏£‡∏£‡∏ä‡∏±‡∏¢‡∏û‡∏•‡∏≤‡∏™‡∏ï‡∏¥‡∏Å‡∏°‡∏±‡πà‡∏ô‡∏Ñ‡∏á‡∏Ñ‡∏£‡∏±‡∏ö üéâ
    ‡πÄ‡∏£‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô‡πÅ‡∏Ñ‡∏õ‡∏ã‡∏µ‡∏• (Cap Seal) ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡πÄ‡∏ä‡πà‡∏ô ‡∏£‡∏≤‡∏Ñ‡∏≤ ‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ ‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö üòä
    """.formatted(profile.getDisplayName());
            replyToUser(replyToken, welcomeMessage);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }




    private void handleMessageEvent(MessageEvent<?> event) {
        if (event.getMessage() instanceof TextMessageContent) {
            TextMessageContent messageContent = (TextMessageContent) event.getMessage();
            String replyToken = event.getReplyToken();
            String userMessage = messageContent.getText();
            String userId = event.getSource().getUserId();

            try {
                UserProfileResponse profile = lineMessagingClient.getProfile(userId).get();

                if (!userRepository.existsById(userId)) {
                    User newUser = new User();
                    newUser.setUserId(userId);
                    newUser.setName(profile.getDisplayName());
                    newUser.setDisplayName(profile.getDisplayName());
                    newUser.setCreatedAt(LocalDateTime.now());
                    userRepository.save(newUser);
                }

            } catch (Exception e) {
                e.printStackTrace();
            }

            String replyText = processBusinessLogic(userMessage);
            replyToUser(replyToken, replyText);
        }
    }




    private String processBusinessLogic(String input) {
        int maxRetries = 2;
        int retryDelayMillis = 1000;

        for (int attempt = 1; attempt <= maxRetries; attempt++) {
            try {
                URL url = new URL("https://intent-api.onrender.com/analyze");
                HttpURLConnection conn = (HttpURLConnection) url.openConnection();
                conn.setRequestMethod("POST");
                conn.setRequestProperty("Content-Type", "application/json; utf-8");
                conn.setRequestProperty("Accept", "application/json");
                conn.setRequestProperty("User-Agent", "Java-LineBot/1.0");
                conn.setDoOutput(true);
                conn.setConnectTimeout(3000);
                conn.setReadTimeout(5000);

                String jsonInput = "{\"text\":\"" + input + "\"}";
                System.out.println("Calling: " + url);
                System.out.println("Payload: " + jsonInput);

                try (OutputStream os = conn.getOutputStream()) {
                    byte[] inputBytes = jsonInput.getBytes(StandardCharsets.UTF_8);
                    os.write(inputBytes, 0, inputBytes.length);
                }

                int status = conn.getResponseCode();
                System.out.println("HTTP Status: " + status);

                if (status == 200) {
                    StringBuilder response = new StringBuilder();
                    try (BufferedReader br = new BufferedReader(
                            new InputStreamReader(conn.getInputStream(), StandardCharsets.UTF_8))) {
                        String line;
                        while ((line = br.readLine()) != null) {
                            response.append(line.trim());
                        }
                    }

                    JsonNode node = new ObjectMapper().readTree(response.toString());
                    String intent = node.has("intent") ? node.get("intent").asText() : "unknown";

                    return switch (intent) {
                        case "contact" -> """
        üìû ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà  
        ‚òéÔ∏è ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£: 089-968-6309  
        üí¨ Line ID: @capseal
        """;

                        case "price" -> """
        üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡∏¥‡πâ‡∏ô‡∏≠‡∏≤‡∏à‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏õ  
        ‡∏£‡∏ö‡∏Å‡∏ß‡∏ô‡πÅ‡∏à‡πâ‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏ô‡πÉ‡∏à ‡πÄ‡∏ä‡πà‡∏ô  
        ‚ñ∏ ‡πÅ‡∏Ñ‡∏õ‡∏ã‡∏µ‡∏•‡∏´‡∏∏‡πâ‡∏°‡∏Ç‡∏ß‡∏î  
        ‚ñ∏ ‡πÅ‡∏Ñ‡∏õ‡∏ã‡∏µ‡∏•‡∏Ñ‡∏≠‡∏ñ‡∏±‡∏á  

        ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ó‡∏≤‡∏á‡πÄ‡∏£‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏à‡πâ‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ñ‡∏£‡∏±‡∏ö  
        ‡∏™‡∏ô‡πÉ‡∏à‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö üòä
        """;


                        case "order" -> """
        üõí ‡∏´‡∏≤‡∏Å‡∏™‡∏ô‡πÉ‡∏à‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠  
        üì≤ ‡∏ó‡∏±‡∏Å Line ID: @capseal  
        üìû ‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏ó‡∏£: 089-968-6309 ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö
        """;

                        case "companyAdvantages" -> """
        üè≠ ‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó **‡∏™‡∏£‡∏£‡∏ä‡∏±‡∏¢‡∏û‡∏•‡∏≤‡∏™‡∏ï‡∏¥‡∏Å‡∏°‡∏±‡πà‡∏ô‡∏Ñ‡∏á**  
        ‚úÖ ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏°‡∏≤‡∏Å‡∏ß‡πà‡∏≤ 10 ‡∏õ‡∏µ  
        üß† ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢‡πÅ‡∏Ñ‡∏õ‡∏ã‡∏µ‡∏•‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á  
        üë• ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 1,000 ‡∏£‡∏≤‡∏¢‡∏ó‡∏±‡πà‡∏ß‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏ß‡πâ‡∏ß‡∏≤‡∏á‡πÉ‡∏à  
        üì¶ ‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏≠‡∏∏‡∏ï‡∏™‡∏≤‡∏´‡∏Å‡∏£‡∏£‡∏°
        """;

                        case "product" -> """
        üì¶ ‡πÄ‡∏£‡∏≤‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢‡πÅ‡∏Ñ‡∏õ‡∏ã‡∏µ‡∏• (Capseal) ‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏Ç‡∏ô‡∏≤‡∏î  
        üìè ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà 18mm ‡∏à‡∏ô‡∏ñ‡∏∂‡∏á 35mm  
        üß¥ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡∏ß‡∏î PET, ‡∏Ç‡∏ß‡∏î‡πÅ‡∏Å‡πâ‡∏ß ‡πÅ‡∏•‡∏∞‡∏ö‡∏£‡∏£‡∏à‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ï‡πà‡∏≤‡∏á ‡πÜ  
        üì∏ ‡∏™‡∏ô‡πÉ‡∏à‡∏Ç‡∏≠‡πÅ‡∏Ñ‡∏ï‡∏ï‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö
        """;

                        case "payment" -> """
        üí≥ ‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏°‡∏µ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ‡∏Ñ‡∏£‡∏±‡∏ö  

        üè¶ ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Å‡∏™‡∏¥‡∏Å‡∏£‡πÑ‡∏ó‡∏¢  
        üî¢ ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ: 4472821463  
        üë§ ‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ: ‡∏Å‡∏©‡∏¥‡∏î‡∏¥‡∏® ‡∏ó‡∏£‡∏á‡∏®‡∏¥‡∏•‡∏õ‡πå  

        ‚úÖ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô  
        üì¶ ‡∏°‡∏µ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á (COD) ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö
        """;

                        case "delivery" -> """
        üöö ‡∏ó‡∏≤‡∏á‡πÄ‡∏£‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πà‡∏ß‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®  
        üè§ ‡∏Ç‡∏ô‡∏™‡πà‡∏á: Flash Express, Kerry, ‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå‡πÑ‡∏ó‡∏¢ ‡∏Ø‡∏•‡∏Ø  
        ‚è± ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á: 1‚Äì3 ‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£  
        üì¶ ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ Tracking Number ‡πÅ‡∏à‡πâ‡∏á‡∏ó‡∏≤‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö
        """;

                        case "working_hours" -> """
        üïò ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏Ñ‡∏∑‡∏≠  
        üìÖ ‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå‚Äì‡πÄ‡∏™‡∏≤‡∏£‡πå: 08:00‚Äì00:00 ‡∏ô.  
        ‚ùå ‡∏´‡∏¢‡∏∏‡∏î‡∏ß‡∏±‡∏ô‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå  
        üí¨ ‡∏ó‡∏±‡∏Å‡πÅ‡∏ä‡∏ó‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏ô‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏î‡πâ ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏à‡∏∞‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏Ñ‡∏£‡∏±‡∏ö üòä
        """;

                        case "location" -> """
        üìç ‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ç‡∏≠‡∏á‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏Ñ‡∏∑‡∏≠  
        üè¢ ‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡∏™‡∏£‡∏£‡∏ä‡∏±‡∏¢‡∏û‡∏•‡∏≤‡∏™‡∏ï‡∏¥‡∏Å‡∏°‡∏±‡πà‡∏ô‡∏Ñ‡∏á ‡∏à‡∏≥‡∏Å‡∏±‡∏î  
        üó∫ 117 ‡∏ï‡∏≥‡∏ö‡∏•‡∏Ñ‡∏•‡∏≠‡∏á‡πÄ‡∏Ç‡∏¥‡∏ô ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏™‡∏á‡∏Ñ‡∏£‡∏≤‡∏°  
        ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏™‡∏á‡∏Ñ‡∏£‡∏≤‡∏° 75000  

        üîó ‡∏î‡∏π‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô Google Maps:  
        https://maps.app.goo.gl/8uh1kepzkr1JQbZU8

        üôè ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏±‡∏ö  
        üïí ‡∏£‡∏ö‡∏Å‡∏ß‡∏ô‡∏ô‡∏±‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡∏≠‡∏á‡πÑ‡∏ß‡πâ‡πÉ‡∏´‡πâ
        """;

                        default -> """
        üôèüèª ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà **‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏™‡∏£‡∏£‡∏ä‡∏±‡∏¢‡∏û‡∏•‡∏≤‡∏™‡∏ï‡∏¥‡∏Å‡∏°‡∏±‡πà‡∏ô‡∏Ñ‡∏á**  
        ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÅ‡∏Ñ‡∏õ‡∏ã‡∏µ‡∏• ‡πÄ‡∏ä‡πà‡∏ô  

        üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤  
        üìû ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£  
        üõí ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠  
        üì¶ ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤  
        üí≥ ‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô  
        üöö ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á  
        üïò ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î-‡∏õ‡∏¥‡∏î  
        üìç ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó  

        ‚ú® ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ üòä
        """;
                    };


                } else {
                    System.out.println("Attempt " + attempt + " failed with HTTP " + status);
                    try (BufferedReader br = new BufferedReader(
                            new InputStreamReader(conn.getErrorStream(), StandardCharsets.UTF_8))) {
                        StringBuilder errorResponse = new StringBuilder();
                        String line;
                        while ((line = br.readLine()) != null) {
                            errorResponse.append(line.trim());
                        }
                        System.out.println("Error Body: " + errorResponse.toString());
                    }
                }

            } catch (IOException e) {
                System.out.println("Attempt " + attempt + " failed: " + e.getMessage());
            }

            try {
                Thread.sleep(retryDelayMillis);
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
                break;
            }
        }

        return "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡πÉ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏™‡∏∞‡∏î‡∏ß‡∏Å‡∏Ñ‡∏£‡∏±‡∏öüôèüèª";
    }


    private void replyToUser(String replyToken, String message) {
        TextMessage reply = new TextMessage(message);
        ReplyMessage replyMessage = new ReplyMessage(replyToken, reply);
        try {
            lineMessagingClient.replyMessage(replyMessage).get(); // ‡∏¢‡∏±‡∏á sync ‡∏≠‡∏¢‡∏π‡πà ‡πÅ‡∏ï‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô background ‡πÅ‡∏•‡πâ‡∏ß
        } catch (Exception e) {
            e.printStackTrace();
        }
    }


}
